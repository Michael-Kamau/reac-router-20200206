import {Link, Route, Switch, useRouteMatch} from "react-router-dom";
import background from "../images/background.png";
import {Menu, MenuItem} from "react-foundation";
import React from "react";
import Topic from "./Topic"

function Topics() {
    let match = useRouteMatch();

    const getStyle=()=>{
        return{
            // backgroundColor:'rgba(76,253,102,0.34)',
            padding:'20px 50px',
            margin:'auto',
            height:'100%',
            color:'#000000'
        }
    }

    const imgStyle=()=>{
        return{
            width:'100%',
            height:'500px'

        }
    }

    return (
        <div style={getStyle()}>
            <h2>Topics</h2>
            <Menu>
                <MenuItem ><Link to={`${match.url}/0`}>Writing</Link></MenuItem>
                <MenuItem><Link to={`${match.url}/1`}>
                    Touring
                </Link></MenuItem>
            </Menu>

            {/* The Topics page has its own <Switch> with more routes
          that build on the /topics URL path. You can think of the
          2nd <Route> here as an "index" page for all topics, or
          the page that is shown when no topic is selected */}
            <Switch >
                <Route path={`${match.path}/:topicId`}>
                    <Topic />
                </Route>

                <Route path={match.path}>
                    <h3>Please select a topic.</h3>
                    <img src="https://www.zaziehotel.paris/images/annuaire/hd/Signature%20copyright%20%20%c2%a9%20Paris%20Tourist%20Office%20-%20Photographe%20%20David%20Lefranc.jpg" style={imgStyle()} alt=""/>
                    <p>Webpack finds all relative module references in CSS (they start with ./) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.Webpack finds all relative module references in CSS (they start with ./) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets. Webpack finds all relative module references in CSS (they start with ./) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.</p>
                </Route>
            </Switch>
        </div>
    );
}

export default Topics;
